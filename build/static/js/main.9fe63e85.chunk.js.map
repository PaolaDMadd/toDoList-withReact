{"version":3,"sources":["toDoListGood.js","App.js","serviceWorker.js","index.js","sunShape.svg"],"names":["ToDoList","useState","textInput","updateValue","list","updateList","type","className","value","onChange","event","target","onClick","e","preventDefault","checked","map","item","index","currentItem","position","filter","_","i","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"uLA8CeA,MA5Cf,WAAqB,IAAD,EACiBC,mBAAS,IAD1B,mBACVC,EADU,KACCC,EADD,OAGQF,mBAAS,IAHjB,mBAGXG,EAHW,KAGNC,EAHM,KAUpB,OACE,6BACA,kDACA,0EACA,0FACA,8BACI,2BAAOC,KAAK,OAAQC,UAAU,WAAWC,MAAON,EAAWO,SAAU,SAACC,GAAD,OAAWP,EAAYO,EAAMC,OAAOH,UACzG,4BAAQI,QAAS,SAACC,GAChBA,EAAEC,iBACFT,EAAW,GAAD,mBAAKD,GAAL,CAAW,CAAEI,MAAON,EAAWa,SAAS,MAElDZ,EAAY,MAJd,UAQJ,4BACCC,EAAKY,KACJ,SAACC,EAAMC,GAAP,OACE,4BACE,0BAAMX,UAAWU,EAAKF,SAAW,eAAgBE,EAAKT,OACtD,2BAAOF,KAAK,WAAWC,UAAU,OAAOQ,QAASE,EAAKF,QAASH,QAAS,WAAOP,EAAWD,EAAKY,KAAI,SAACG,EAAaC,GAC/G,OAAGF,IAAUE,EACJ,CAACZ,MAAOW,EAAYX,MAAOO,SAAUI,EAAYJ,SAEnDI,SAGT,2BAAOb,KAAK,WAAWC,UAAU,OAAOK,QAAS,kBAAMP,EAAWD,EAAKiB,QAAO,SAACC,EAAGC,GAAJ,OAAQL,IAAUK,gB,gBCvBzFC,MAXf,WACE,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKkB,IAAKC,IAAMnB,UAAU,WAAWoB,IAAI,SACzC,kBAAC,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,sCEzI5BC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.9fe63e85.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction ToDoList (){\n  const [ textInput, updateValue ] = useState('');\n  // const [ strike, updateStrike ] = useState(false);\n  const [list,updateList] = useState([\n\n    // removed items to start with a clear list { value: 'item 1', checked: true },\n    // { value: 'item 2', checked: false },\n    \n]);\n\nreturn (\n  <div>\n  <h3> Daily to Do List </h3>\n  <p> Add an item or activity filling the form. </p>\n  <p> When finished, you can either tick the done or remove box.</p>\n  <form>\n      <input type=\"text\"  className='text-box' value={textInput} onChange={(event) => updateValue(event.target.value)} />\n      <button onClick={(e) => {\n        e.preventDefault()\n        updateList([...list, { value: textInput, checked: false }])\n\n        updateValue('')\n      }\n      }> add </button>\n    </form>\n  <ul>\n  {list.map(\n    (item, index) => (\n      <li>\n        <span className={item.checked && \"lineThrough\"}>{item.value}</span> \n        <input type=\"checkbox\" className=\"box1\" checked={item.checked} onClick={() => {updateList(list.map((currentItem, position) => {\n          if(index === position) {\n            return {value: currentItem.value, checked: !currentItem.checked }\n          }\n          return currentItem\n        }))}}   />\n\n        <input type=\"checkbox\" className=\"box2\" onClick={() => updateList(list.filter((_, i)=>index !== i))}/>\n      </li>)\n  )}\n</ul>\n</div>\n)\n}\nexport default ToDoList\n\n  {/* <li> <span className={strike && \"lineThrough\"}> Item 1</span> <input type=\"checkbox\" className=\"box1\" checked={strike} onClick={() => {updateStrike(!strike)}}   /> <input type=\"checkbox\" className=\"box2\"/> </li>\n  <li>ITEM 2 <input type=\"checkbox\" className=\"box1\"/> <input type=\"checkbox\" className=\"box2\"/></li> */}\n  \n// test\n\n\n","import React from 'react';\nimport logo from './sunShape.svg';\nimport ToDoList from './toDoListGood.js';\nimport './AppGood.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <ToDoList />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './AppGood.css';\nimport './toDoListGood.js';\nimport './sunShape.svg';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sunShape.d9c88e48.svg\";"],"sourceRoot":""}